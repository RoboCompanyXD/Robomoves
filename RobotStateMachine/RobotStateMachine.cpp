/**
 * File:   UC.cpp
 * Author: chris
 *
 * Created on 30 de junio de 2020, 10:52
 */

#include "RobotStateMachine.h"
#include "../ControlRobot/ControlRobot.h"
#include <stdexcept>

/**
 * RobotStateMachine Class constructor
 * @param cr Pointer to an instance of this system's robot controller interface.
 */
RobotStateMachine::RobotStateMachine(ControlRobot::ControlRobot * cr) {
    this->robot = cr;
    initStatechart();
}

/**
 * RobotStateMachine Class destructor
 */
RobotStateMachine::~RobotStateMachine() {
    // TODO
}

/**
 * Auto-generated by Rhapsody
 * TODO: documentar
 */
void RobotStateMachine::initStatechart() {
    currentSuperState = DISABLED; // TODO: change to UC_Enum.OMNonState for better readability
    currentState = DISABLED;
    currentUnDock_subState = DISABLED;
    currentNormalOperate_subState = DISABLED;
    currentTrackingByCamera_subState = DISABLED;
    currentPersonOutView_subState = DISABLED;
    currentPersonInView_subState = DISABLED;
    PersonInView_timeout = 0; // TODO: BORRAR?
    currentDodgeObstacle_subState = DISABLED;
    currentCrashAlgorithm_subState = DISABLED;
    currentCliffAhead_subState = DISABLED;
    rootState_entDef();
}

/**
 * Auto-generated by Rhapsody
 * TODO: documentar
 */
void RobotStateMachine::rootState_entDef() {
    currentSuperState = IDLE;
    currentState = IDLE;
}

/**
 * Auto-generated by Rhapsody
 * TODO: documentar
 */
void RobotStateMachine::UnDock_entDef() {
    currentSuperState = UN_DOCKING;
    //#[ transition UnDock.0 
    robot->sensores.sum_distance = 0;
    //#]
    currentUnDock_subState = ExitDock;
    currentState = ExitDock;
}

/**
 * Auto-generated by Rhapsody
 * TODO: documentar
 */
void RobotStateMachine::NormalOperate_entDef() {
    currentSuperState = ROAMING;
    NormalOperateEntDef();
}

/**
 * Auto-generated by Rhapsody
 * TODO: documentar
 */
void RobotStateMachine::NormalOperateEntDef() {
    TrackingByCamera_entDef();
}

/**
 * Auto-generated by Rhapsody
 * TODO: documentar
 */
void RobotStateMachine::TrackingByCamera_entDef() {
    currentNormalOperate_subState = TrackingByCamera;
    TrackingByCameraEntDef();
}

/**
 * Auto-generated by Rhapsody
 * TODO: documentar
 */
void RobotStateMachine::TrackingByCameraEntDef() {
    //## transition 14 
    if (robot->cam.isPersonInView == true) {
        PersonInView_entDef();
    } else {
        PersonOutView_entDef();
    }
}

/**
 * Auto-generated by Rhapsody
 * TODO: documentar
 */
void RobotStateMachine::PersonInView_entDef() {
    currentTrackingByCamera_subState = FollowingUser;
    currentPersonInView_subState = FollowingUser_GettingCloser;
    currentState = FollowingUser_GettingCloser;
    //#[ state NormalOperate.TrackingByCamera.PersonInView.PersonInView.PersonInView_ApproachUser.(Entry) 
    robot->computeCameraApproach();
    //#]
    //PersonInView_timeout = scheduleTimeout(ComputeStepTime, "ROOT.NormalOperate.TrackingByCamera.PersonInView.ROOT.PersonInView.PersonInView_ApproachUser");
}

/**
 * Auto-generated by Rhapsody
 * TODO: documentar
 */
void RobotStateMachine::PersonOutView_entDef() {
    currentTrackingByCamera_subState = SearchingUser;
    //#[ transition NormalOperate.TrackingByCamera.PersonOutView.4 
    robot->sensores.sum_angle = 0;
    robot->sensores.sum_distance = 0;
    //#]
    currentPersonOutView_subState = SearchingUser_Look360Around;
    currentState = SearchingUser_Look360Around;
}

/**
 * Auto-generated by Rhapsody
 * TODO: documentar
 */
void RobotStateMachine::DodgeObstacle_entDef() {
    currentNormalOperate_subState = DodgingObstacle;
    //#[ transition 9 
    robot->sensores.sum_angle = 0;
    robot->sensores.sum_distance = 0;
    //#]
    currentDodgeObstacle_subState = MovingBackFromObstacle;
    currentState = MovingBackFromObstacle;
}

/**
 * Auto-generated by Rhapsody
 * TODO: documentar
 */
void RobotStateMachine::CliffAhead_entDef() {
    currentNormalOperate_subState = AvoidingCliff;
    //#[ transition 12 
    robot->sensores.sum_angle = 0;
    robot->sensores.sum_distance = 0;
    //#]
    currentCliffAhead_subState = TurnAwayFromCliff;
    currentState = TurnAwayFromCliff;
}

/**
 * Auto-generated by Rhapsody
 * TODO: documentar
 */
void RobotStateMachine::CrashAlgorithm_entDef() {
    currentDodgeObstacle_subState = CrashAlgorithm;
    currentCrashAlgorithm_subState = CrashAlgorithm_Dodge;
    currentState = CrashAlgorithm_Dodge;
}

/**
 * Partly auto-generated by Rhapsody
 * 
 * This method handles the flow of the state machine.
 * 
 * 
 * TODO: documentar
 */
void RobotStateMachine::statechart_process() {

    /**
     * First level "super-case" machine states: 
     *  - Idle
     *  - Dock
     *  - Shutdown
     *  - Undock
     *  - Normal Operate
     */
    switch (currentState) {

        case IDLE:
        {
            /**
             * IDLE super-state
             * Description: The robot is motionless (motors are off), but sensor data is still being checked.
             * Enter-conditions:
             *  - When powering ON robot    >> by default
             *  - While in NORMAL_ROAMING   >> 'Clean' button is pressed
             *  - While in DOCKING          >> the robot has finished docking in the charge-bay
             * Exit-conditions:
             *  - 'Spot' button is pressed  >> go to SHUTDOWN
             *  - 'Dock' button is pressed  >> go to DOCKING
             *  - Battery-level below 15%   >> go to DOCKING
             *  - 'Clean' button is pressed >> if inDock == false >> go to UN_DOCKING
             *  - 'Clean' button is pressed >> if inDock == true  >> go to NORMAL_ROAMING 
             */

            if (robot->sensores.battery_level < 15 || robot->check_btnDock()) {
                currentSuperState = DOCKING;
                currentState = DOCKING;
                //#[ state Dock.(Entry) 
                robot->gotoDock();
                //#]
                break; // exit from Idle super-state
            } else if (robot->check_btnClean()) {
                if (robot->sensores.IsDocked == true) {
                    UnDock_entDef();
                    break; // Salir inmediatamente del sub-estado
                } else {
                    // TODO: CRITICAL Why do we enter into NORMAL_ROAMING by default here???
                    //       If battery > 15 && !DockButton && !CleanButton then entDef NormalOperate
                    NormalOperate_entDef();
                    break; // Salir inmediatamente del sub-estado
                }
            } else if (robot->check_btnSpot()) {
                currentSuperState = SHUTDOWN;
                currentState = SHUTDOWN;
                break; // Salir inmediatamente del sub-estado
            }

            break; // exit super-case IDLE
        } //end case IDLE

        case DOCKING:
        {
            /**
             * DOCKING super-state
             * 
             * Description: the robot is going to the charge-bay
             * Enter-conditions:
             *  - While in IDLE or NORMAL_ROAMING >> 'Dock' button is pressed
             *  - While in IDLE or NORMAL_ROAMING >> battery_level < 15% is detected
             * Exit-conditions:
             *  - inDock == true is detected      >> go to IDLE
             */
            if (robot->sensores.IsDocked == true) {
                currentSuperState = IDLE;
                currentState = IDLE;
                break; // Salir inmediatamente del sub-estado DOCKING
            }

            // TODO CRITICAL: why is this state empty???? There is no action taken in this state
            //                Should not we be calling goToDock() to compute the dock???

            break; // exit super-case DOCKING
        } // end case DOCKING

        case SHUTDOWN:
        {
            /**
             *  SHUTDOWN super-state
             * Description: Fin de operacion. Terminar la ejecucion del algoritmo principal, liberar recursos y salir.
             * Enter-conditions:
             *  - While in IDLE           >> 'Spot' button is pressed
             *  - While in NORMAL_ROAMING >> 'Spot' button is pressed
             *  - While in UN_DOCKING     >> 'Spot' button is pressed
             * Exit-conditions:
             *  - All systems shut down.
             */
            currentState = END_STATE_MACHINE;
            currentSuperState = END_STATE_MACHINE;
            endBehavior();

            break; // exit case SHUTDOWN
        } // end case SHUTDOWN

        case UN_DOCKING:
        {
            /**
             * UN_DOCKING super-state
             * Description: Exit charging dock and turn around
             * Sub-states:
             *  - ExitDock
             *  - UnDock_Rotate180
             * Enter-conditions:
             *  - While in IDLE            >> 'Clean' button is pressed && inDock == true
             * Exit-conditions:
             *  - 'Spot' button is pressed >> go to SHUTDOWN
             *  - Successful un-docking    >> go to NORMAL_ROAMING
             */

            /** Check exit-condition: if 'Spot' button is pressed >> go to SHUTDOWN */
            if (robot->check_btnSpot()) {
                currentUnDock_subState = DISABLED;
                currentSuperState = SHUTDOWN;
                currentState = SHUTDOWN;
                break; // Exit the UN_DOCKING super-state immediately, without computing UnDock's sub-states
            }

            /**
             * UN_DOCKING sub-states:
             *  - UN_DOCKING->ExitDock
             *  - UN_DOCKING->UnDock_Rotate180
             */
            switch (currentUnDock_subState) {
                case ExitDock:
                {
                    /**
                     * UN_DOCKING->ExitDock sub-state
                     * Description: Step backwards to exit charging dock
                     * Enter-conditions:
                     *  - Default UN_DOCKING sub-state
                     * Exit-conditions:
                     *  - sensoresSumDistancia < -300 is detected >> go to UN_DOCKING->UnDock_Rotate180
                     */

                    /** In this state: set wheels to travel backwards */
                    robot->setMotores_actual(motores_BACK);
                    
                    /** Check exit condition: after moving (backwards) 30cm >> go to Rotate180 */
                    if (robot->sensores.sum_distance < -300) {
                        robot->sensores.sum_angle = 0;
                        currentUnDock_subState = TurnAwayFromDock;
                        currentState = TurnAwayFromDock;
                        break; // Exit the ExitDock sub-state immediately
                    }

                    break; // end case "ExitDock"
                } // end ExitDock

                case TurnAwayFromDock:
                {
                    /**
                     * UN_DOCKING->UnDock_Rotate180 sub-state
                     * Description: Turn away from charge-bay and face towards the room by rotating 180º
                     * Enter-conditions:
                     *  - While in UN_DOCKING->ExitDock >> sensoresSumDistancia < -300 is detected
                     * Exit-conditions:
                     *  - sensoresSumAngulo > 180º is detected >> go to NORMAL_ROAMING
                     */

                    /** In this state: turn around 180º*/
                    robot->setMotores_actual(motores_LEFT);
                    
                    /** Check exit condition: after turning 180º >> go to NORMAL_ROAMING */
                    if (robot->sensores.sum_angle > 180) {
                        currentUnDock_subState = DISABLED;
                        NormalOperate_entDef(); // go to NORMAL_ROAMING
                        break; // exit immediately from UnDock_Rotate180
                    }

                    break; // exit case "UnDock_Rotate180"
                } // end UnDock_Rotate180

                default:
                    throw std::logic_error("Invalid 'currentUnDock_subState' " << currentUnDock_subState << " state value within the state-machine");
                    break;
            } // end "UnDock" (second level) sub-states

            break; // exit super-state UN_DOCKING
        } // end case UN_DOCKING

        case ROAMING:
        {
            /**
             * NORMAL_ROAMING super-state
             * Description: Modo de operacion normal.
             * Sub-states:
             *  - TrackingByCamera
             *  - CliffAhead
             *  - DodgeObstacle
             * Enter-conditions:
             *  - While in UN_DOCKING >> Successful un-docking
             *  - While in IDLE       >> 'Clean' button is pressed && inDock == false
             * Exit-conditions:
             *  - 'Spot' button is pressed  >> go to SHUTDOWN
             *  - 'Dock' button is pressed  >> go to DOCKING
             *  - Battery-level below 15%   >> go to DOCKING
             *  - 'Clean' button is pressed >> go to IDE
             */

            /** Check exit conditions: if battery-level < 15% OR 'Dock' button is pressed >> go to DOCKING */
            if (robot->sensores.battery_level < 15 || robot->check_btnDock()) {
                //NormalOperate_exit();
                currentSuperState = DOCKING;
                currentState = DOCKING;
                robot->gotoDock();
                break; // exit from NORMAL_ROAMING immediately
            } else if (robot->check_btnClean()) {
                //NormalOperate_exit();
                currentSuperState = IDLE;
                currentState = IDLE;
                break; // exit from NORMAL_ROAMING immediately
            } else if (robot->check_btnSpot()) {
                //NormalOperate_exit();
                currentSuperState = SHUTDOWN;
                currentState = SHUTDOWN;
                break; // exit from NORMAL_ROAMING immediately
            }

            /**
             * NORMAL_ROAMING sub-states (second level):
             *  - NORMAL_ROAMING->TrackingByCamera
             *  - NORMAL_ROAMING->Cliff Ahead
             *  - NORMAL_ROAMING->DodgeObstacle
             */
            switch (currentNormalOperate_subState) {
                    // State TrackingByCamera
                    // Description: Seguimiento mediante la camara.
                case TrackingByCamera:
                {
                    /**
                     * NORMAL_ROAMING->TrackingByCamera sub-state
                     * Description: The robot is trying to follow the user using the RGB camera.
                     * Sub-states:
                     *  - NORMAL_ROAMING->TrackingByCamera->PersonOutView
                     *  - NORMAL_ROAMING->TrackingByCamera->PersonInView
                     * Enter-conditions:
                     *  - Default NORMAL_ROAMING sub-state
                     *  - While in NORMAL_ROAMING->CliffAhead->GoForward          >> sensoresSumDistancia > 300 is detected
                     *  - While in NORMAL_ROAMING->DodgleObstacle->CrashAlgorithm >> Finished 
                     * Exit-conditions:
                     *  - sensoresCliff == true is detected >> go to NORMAL_ROAMING->CliffAhead
                     *  - sensoresBl OR sensoresBr == true is detected >> go to NORMAL_ROAMING->DodgeObstacle
                     */

                    // TODO: Resumir Qué se hace en los siguientes if-else:
                    if (robot->sensores.bl == true || robot->sensores.br == true) {
                        currentTrackingByCamera_subState = DISABLED;
                        currentPersonInView_subState = DISABLED;
                        currentPersonOutView_subState = DISABLED;
                        DodgeObstacle_entDef();
                        break; // Salir inmediatamente del sub-estado
                    } else if (robot->sensores.cliff == true) {
                        currentTrackingByCamera_subState = DISABLED;
                        currentPersonInView_subState = DISABLED;
                        currentPersonOutView_subState = DISABLED;
                        CliffAhead_entDef();

                    }

                    /**
                     * NORMAL_ROAMING->TrackingByCamera sub-sub-states (third level):
                     *  - NORMAL_ROAMING->TrackingByCamera->PersonInView
                     *  - NORMAL_ROAMING->TrackingByCamera->PersonOutView
                     */
                    switch (currentTrackingByCamera_subState) {
                        case FollowingUser:
                        {
                            /**
                             * NORMAL_ROAMING->TrackingByCamera->PersonInView sub-sub-state
                             * Description: the user is within the RGB camera's line-of-view
                             * Sub-states:
                             *  - ApproachUser
                             *  - PathBlocked
                             * Enter-conditions:
                             *  - When first entering NORMAL_ROAMING->TrackingByCamera     >> cameraIsPersonInView == true is detected
                             *  - While in NORMAL_ROAMING->TrackingByCamera->PersonOutView >> cameraIsPersonInView == true is detected
                             * Exit-conditions:
                             *  - cameraIsPersonInView == false is detected >> go to NORMAL_ROAMING->TrackingByCamera->PersonOutView
                             */

                            // Description: La persona está a la vista.
                            // Acercarse todo lo que se pueda sin invadir su espacio.

                            if (robot->cam.isPersonInView == false) {
                                currentPersonInView_subState = DISABLED;
                                PersonOutView_entDef();
                                break; // Salir inmediatamente del sub-estado
                            }

                            /**
                             * NORMAL_ROAMING->TrackingByCamera->PersonInView->PersonInView sub-sub-sub-states (fourth level):
                             *  - NORMAL_ROAMING->TrackingByCamera->PersonInView->ApproachUser
                             *  - NORMAL_ROAMING->TrackingByCamera->PersonInView->PathBlocked
                             */
                            switch (currentPersonInView_subState) {
                                case FollowingUser_GettingCloser:
                                {
                                    /**
                                     * NORMAL_ROAMING->TrackingByCamera->PersonInView->ApproachUser sub-sub-sub-state
                                     * Description: approach the user (get as close to the user as possible if there is no obstacles ahead)
                                     * Enter-conditions:
                                     *  - When entering NORMAL_ROAMING->TrackingByCamera->PersonInView         >> by default
                                     *  - While in NORMAL_ROAMING->TrackingByCamera->PersonInView->PathBlocked >> lidarIsObstacle == false is detected
                                     * Exit-conditions:
                                     *  - Higher exit-conditions of NORMAL_ROAMING->TrackingByCamera
                                     */

                                    robot->computeCameraApproach();
                                    if (robot->lidar.isObstable == true) {
                                        //#[ transition NormalOperate.TrackingByCamera.PersonInView.1 
                                        robot->reproducirSonidoBloqueado();
                                        //#]
                                        currentPersonInView_subState = FollowingUser_ObstacleInBetween;
                                        currentState = FollowingUser_ObstacleInBetween;
                                        //#[ state NormalOperate.TrackingByCamera.PersonInView.PersonInView.PersonInView_PathBlocked.(Entry) 
                                        //#]
                                        break; // Salir inmediatamente del sub-estado
                                    }

                                    break; // end case "PersonInView_ApproachUser"
                                } // end ApproachUser

                                    // State PersonInView_PathBlocked
                                    // Description: Obstaculo en el camino
                                    // El obstaculo puede ser una persona o un onstaculo real
                                    // Puedo rotar si la persona se mueve y retroceder
                                case FollowingUser_ObstacleInBetween:
                                {
                                    /**
                                     * NORMAL_ROAMING->TrackingByCamera->PersonInView->PathBlocked sub-sub-sub-state
                                     * Description: approach the user (get as close to the user as possible taking into account that there's an obstacle ahead)
                                     * Enter-conditions:
                                     *  - While in NORMAL_ROAMING->TrackingByCamera->PersonInView->ApproachUser >> lidarIsObstacle == true is detected
                                     * Exit-conditions:
                                     *  - lidarIsObstacle == false is detected >> go to NORMAL_ROAMING->TrackingByCamera->PersonInView->ApproachUser
                                     *  - Higher exit-conditions of NORMAL_ROAMING->TrackingByCamera
                                     */

                                    // Ejecutar funcion de calculo de aproximacion con obstaculo
                                    robot->computeCameraWithObstacle();
                                    if (robot->lidar.isObstable == false) {
                                        //#[ transition NormalOperate.TrackingByCamera.PersonInView.1 
                                        robot->reproducirSonidoDesbloqueado();
                                        //#]
                                        currentPersonInView_subState = FollowingUser_GettingCloser;
                                        currentState = FollowingUser_GettingCloser;
                                        //#[ state NormalOperate.TrackingByCamera.PersonInView.PersonInView.PersonInView_Pathblocked.(Entry) 
                                        //#]
                                        break; // Salir inmediatamente del sub-estado
                                    }

                                    break; // end case "PersonInView_Pathblocked"
                                } // end PathLocked

                                default:
                                    throw std::logic_error("Invalid switch-case of the Robomoves state-machine");
                                    break;
                            } // end switch "PersonInView_subState"
                            break; // end case "PersonInView"
                        } // end "PersonInView"

                        case SearchingUser:
                        {
                            /**
                             * NORMAL_ROAMING->TrackingByCamera->PersonOutView sub-sub-state
                             * Description: the user is NOT within the RGB camera's line-of-view, so the robot is searching for the user
                             * Sub-states:
                             *  - Rotate360
                             *  - ComputePostition
                             *  - RotateToMove
                             *  - GoForward
                             * Enter-conditions:
                             *  - When first entering NORMAL_ROAMING->TrackingByCamera    >> cameraIsPersonInView == false is detected
                             *  - While in NORMAL_ROAMING->TrackingByCamera->PersonInView >> cameraIsPersonInView == false is detected
                             * Exit-conditions:
                             *  - cameraIsPersonInView == true is detected >> go to NORMAL_ROAMING->TrackingByCamera->PersonInView
                             */

                            switch (currentPersonOutView_subState) {
                                case SearchingUser_TurnToEmptyHallway:
                                {
                                    /**
                                     * NORMAL_ROAMING->TrackingByCamera->PersonOutView->RotateToMove sub-sub-sub-state
                                     * Description: TODO
                                     * Enter-conditions:
                                     *  - While in NORMAL_ROAMING->TrackingByCamera->PersonOutView->ComputePosition >> finished computing
                                     * Exit-conditions:
                                     *  - sensoresSumAngulo > computedAngle is detected >> go to NORMAL_ROAMING->TrackingByCamera->PersonOutView->GoForward
                                     */

                                    robot->setMotores_actual(motores_LEFT);
                                    if (robot->sensores.sum_angle > robot->lidar.computedAngle) {
                                        currentPersonOutView_subState = SearchingUser_TraverseEmptyHallway;
                                        currentState = SearchingUser_TraverseEmptyHallway;
                                        break; // Salir inmediatamente del sub-estado
                                    }

                                    break; // end case "PersonOutView_RotateToMove"
                                } // end PersonOutView_RotateToMove

                                case SearchingUser_FindEmptyHallway:
                                {
                                    /**
                                     * NORMAL_ROAMING->TrackingByCamera->PersonOutView->RotateToMove sub-sub-sub-state
                                     * Description: compute which direction the robot has to turn to (e.g.: find the lidar sector with highest average distance)
                                     * Enter-conditions:
                                     *  - While in NORMAL_ROAMING->TrackingByCamera->PersonOutView->Rotate360 >> finished a full 360º turn
                                     * Exit-conditions:
                                     *  - [[ TODO CRITICAL ]]  >> go to NORMAL_ROAMING->TrackingByCamera->PersonOutView->RotateToMove
                                     */

                                    robot->sensores.sum_angle = 0;
                                    robot->lidar.computeLidarTripPersonOutOfView();
                                    //#]
                                    currentPersonOutView_subState = SearchingUser_TurnToEmptyHallway;
                                    currentState = SearchingUser_TurnToEmptyHallway;

                                    break; // end case "PersonOutView_ComputePosition"
                                } // end PersonOutView_ComputePosition

                                case SearchingUser_TraverseEmptyHallway:
                                {
                                    /**
                                     * NORMAL_ROAMING->TrackingByCamera->PersonOutView->GoForward sub-sub-sub-state
                                     * Description: TODO
                                     * Enter-conditions:
                                     *  - While in NORMAL_ROAMING->TrackingByCamera->PersonOutView->RotateToMove >> finished turning
                                     * Exit-conditions:
                                     *  - Finished traveling computed distance >> go to NORMAL_ROAMING->TrackingByCamera->PersonOutView->Rotate360
                                     */

                                    robot->setMotores_actual(motores_FWD);
                                    // TODO: resumir lo que se hace en este if
                                    if (robot->sensores.sum_distance > robot->lidar.computedDistance) {
                                        //#[ transition NormalOperate.TrackingByCamera.PersonOutView.2 
                                        robot->sensores.sum_angle = 0;
                                        //#]
                                        currentPersonOutView_subState = SearchingUser_Look360Around;
                                        currentState = SearchingUser_Look360Around;
                                        break; // Salir inmediatamente del sub-estado
                                    }

                                    break; // end case "PersonOutView_GoForward"
                                } // end PersonOutView_GoForward

                                case SearchingUser_Look360Around:
                                {
                                    /**
                                     * NORMAL_ROAMING->TrackingByCamera->PersonOutView->Rotate360 sub-sub-sub-state
                                     * Description: TODO
                                     * Enter-conditions:
                                     *  - When entering NORMAL_ROAMING->TrackingByCamera->PersonOutView >> by default
                                     *  - While in NORMAL_ROAMING->TrackingByCamera->PersonOutView->GoForward >> finished traveling computed distance
                                     * Exit-conditions:
                                     *  - Finished rotating 360º >> go to NORMAL_ROAMING->TrackingByCamera->PersonOutView->ComputePosition
                                     */

                                    robot->setMotores_actual(motores_LEFT);
                                    if (robot->sensores.sum_angle > 360) {
                                        currentPersonOutView_subState = SearchingUser_FindEmptyHallway;
                                        currentState = SearchingUser_FindEmptyHallway;
                                        break; // Salir inmediatamente del sub-estado
                                    }

                                    break; // end case "PersonOutView_GoForward"
                                } // end PersonOutView_GoForward

                                default:
                                    throw std::logic_error("Invalid switch-case of the Robomoves state-machine");
                                    break;
                            } //end switch (PersonOutView_subState)

                            break; // end case PersonOutView
                        } //end PersonOutView

                        default:
                            throw std::logic_error("Invalid switch-case of the Robomoves state-machine");
                            break;
                    } // end switch (TrackingByCamera_subState)

                    break; // end case "TrackingByCamera"
                } // end TrackingByCamera

                case DodgingObstacle:
                {
                    /**
                     * NORMAL_ROAMING->DodgeObstacle sub-state
                     * Description: An obstacle (which has been detected by the bumpers) is being dodged
                     * Sub-states:
                     *  - NORMAL_ROAMING->DodgeObstacle->MoveBack
                     *  - NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm
                     * Enter-conditions:
                     *  - While in NORMAL_ROAMING->TrackingByCamera >> a bumper sensor is triggered
                     * Exit-conditions:
                     *  - subroutine 'CrashAlgorithm' finished dodging obstacle >> go to NORMAL_ROAMING->TrackingByCamera
                     *  - sensoresCliff == true is detected >> go to NORMAL_ROAMING->CliffAhead
                     */

                    if (robot->sensores.cliff == true) {
                        currentCrashAlgorithm_subState = DISABLED;
                        currentDodgeObstacle_subState = DISABLED;
                        CliffAhead_entDef();
                        break; // Salir inmediatamente del sub-estado
                    }

                    /**
                     * NORMAL_ROAMING->DodgeObstacle sub-sub-states (third level):
                     *  - Move back
                     *  - Crash algorithm
                     */
                    switch (currentDodgeObstacle_subState) { // State Dodge_MoveBack
                        case MovingBackFromObstacle:
                        {
                            /**
                             * NORMAL_ROAMING->DodgeObstacle->MoveBack sub-sub-state
                             * Description: back away from the bumped obstacle
                             * Enter-conditions:
                             *  - When entering NORMAL_ROAMING->DodgeObstacle >> by default
                             *  - While in NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm >> a bumper sensor is triggered
                             * Exit-conditions:
                             *  - traveled 30cm backing away from obstacle >> go to NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm
                             */

                            robot->setMotores_actual(motores_BACK);
                            //## transition 10 
                            if (robot->sensores.sum_distance < -30) {
                                CrashAlgorithm_entDef();
                                break; // Salir inmediatamente del sub-estado
                            }

                            break; // end case Dodge_MoveBack
                        } // end Dodge_MoveBack

                        case CrashAlgorithm:
                        {
                            /**
                             * NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm sub-sub-state
                             * Description: the robot is trying to dodge an obstacle (algoritmo del TFG)
                             * Sub-states:
                             *  - NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm->Dodge
                             *  - NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm->DodgeParallel
                             *  - NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm->GoForward
                             *  - NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm->GoForwardExtended
                             *  - NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm->RecoverTrajectory
                             * Enter-conditions:
                             *  - While in NORMAL_ROAMING->DodgeObstacle->MoveBack >> finished backing away from obstacle
                             * Exit-conditions:
                             *  - while sub-state RecoverTrajectory >> finished recovering trajectory
                             */

                            if (robot->sensores.bl == true || robot->sensores.br == true) {
                                currentCrashAlgorithm_subState = DISABLED;
                                //#[ transition 11 
                                robot->sensores.sum_distance = 0;
                                //#]
                                currentDodgeObstacle_subState = MovingBackFromObstacle;
                                currentState = MovingBackFromObstacle;
                                break; // Salir inmediatamente del sub-estado
                            }

                            /**
                             * "Crash Algorithm" sub-sub-sub-states (fourth level):
                             *  - Dodge
                             *  - DodgeParallel
                             *  - GoForward
                             *  - GoForwardExtended
                             *  - RecoverTrajectory
                             */
                            switch (currentCrashAlgorithm_subState) {
                                case CrashAlgorithm_Dodge:
                                {
                                    /**
                                     * NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm sub-sub-state
                                     * Description: the robot is rotating 25º to attempt a non-colliding direction
                                     * Enter-conditions:
                                     *  - When entering NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm >> by default
                                     * Exit-conditions:
                                     *  - finished turning 25º
                                     */

                                    robot->setMotores_actual(motores_LEFT);
                                    if (robot->sensores.sum_angle > 25) {
                                        currentCrashAlgorithm_subState = CrashAlgorithm_DodgeParallel;
                                        currentState = CrashAlgorithm_DodgeParallel;
                                        break; // Salir inmediatamente del sub-estado
                                    }

                                    break; // end case CrashAlgorithm_Dodge
                                } // end CrashAlgorithm_Dodge

                                case CrashAlgorithm_DodgeParallel:
                                {
                                    /**
                                     * NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm->DodgeParallel sub-sub-sub-state
                                     * Description: TODO
                                     * Enter-conditions:
                                     *  - While in NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm->Dodge >> finished turning 25º
                                     *  - While in NORMAL_ROAMING->DodgeObstacle->CrashAlgorithm->GoForward >> finished turning 25º
                                     * Exit-conditions:
                                     *  - finished turning 25º
                                     */

                                    robot->setMotores_actual(motores_LEFT);
                                    if (robot->sensores.lbump_front == false) {
                                        currentCrashAlgorithm_subState = CrashAlgorithm_GoForward;
                                        currentState = CrashAlgorithm_GoForward;
                                        break; // Salir inmediatamente del sub-estado
                                    }

                                    break; // end CrashAlgorithm_DodgeParallel
                                } // end CrashAlgorithm_DodgeParallel

                                case CrashAlgorithm_GoForward:
                                {
                                    // State NormalOperate >> DodgeObstacle >> CrashAlgorithm >> GoForward
                                    robot->setMotores_actual(motores_FWD);
                                    if (robot->sensores.lbump_side == false) {
                                        //#[ transition NormalOperate.DodgeObstacle.CrashAlgorithm.5 
                                        robot->sensores.sum_distance = 0;
                                        //#]
                                        currentCrashAlgorithm_subState = CrashAlgorithm_GoForwardExtended;
                                        currentState = CrashAlgorithm_GoForwardExtended;
                                        break; // Salir inmediatamente del sub-estado
                                    } else if (robot->sensores.lbump_front == true) {
                                        currentCrashAlgorithm_subState = CrashAlgorithm_DodgeParallel;
                                        currentState = CrashAlgorithm_DodgeParallel;
                                        break; // Salir inmediatamente del sub-estado
                                    }

                                    break; // end CrashAlgorithm_GoForward
                                } // end CrashAlgorithm_GoForward

                                case CrashAlgorithm_GoForwardExtended:
                                {
                                    // State CrashAlgorithm_GoForwardExtended
                                    robot->setMotores_actual(motores_FWD);
                                    if (robot->sensores.sum_distance > 300) {
                                        currentCrashAlgorithm_subState = CrashAlgorithm_RecoverTrajectory;
                                        currentState = CrashAlgorithm_RecoverTrajectory;
                                        break; // Salir inmediatamente del sub-estado
                                    } else if (robot->sensores.lbump_front == false && robot->sensores.lbump_side == true) {
                                        currentCrashAlgorithm_subState = CrashAlgorithm_GoForward;
                                        currentState = CrashAlgorithm_GoForward;
                                        break; // Salir inmediatamente del sub-estado
                                    } else if (robot->sensores.lbump_front == true) {
                                        currentCrashAlgorithm_subState = CrashAlgorithm_DodgeParallel;
                                        currentState = CrashAlgorithm_DodgeParallel;
                                        break; // Salir inmediatamente del sub-estado
                                    }

                                    break; // end CrashAlgorithm_GoForwardExtended
                                } // end CrashAlgorithm_GoForwardExtended

                                case CrashAlgorithm_RecoverTrajectory:
                                {
                                    // State CrashAlgorithm_RecoverTrajectory
                                    robot->setMotores_actual(motores_RIGHT);
                                    if (robot->sensores.sum_angle > -25 && robot->sensores.sum_angle < 25) {
                                        currentDodgeObstacle_subState = DISABLED;
                                        TrackingByCamera_entDef();
                                        break; // Salir inmediatamente del sub-estado
                                    } else if (robot->sensores.lbump_front == true) {
                                        currentCrashAlgorithm_subState = CrashAlgorithm_DodgeParallel;
                                        break; // Salir inmediatamente del sub-estado
                                        currentState = CrashAlgorithm_DodgeParallel;
                                    } else if (robot->sensores.lbump_front == false && robot->sensores.lbump_side == true) {
                                        currentCrashAlgorithm_subState = CrashAlgorithm_GoForward;
                                        currentState = CrashAlgorithm_GoForward;
                                        break; // Salir inmediatamente del sub-estado
                                    }

                                    break; // end case CrashAlgorithm_RecoverTrajectory
                                } // end CrashAlgorithm_RecoverTrajectory

                                default:
                                    throw std::logic_error("Invalid switch-case of the Robomoves state-machine");
                                    break;

                            } // end switch (CrashAlgorithm_subState)

                            break; // end case CrashAlgorithm:
                        } // end CrashAlgorithm:

                        default:
                            throw std::logic_error("Invalid switch-case of the Robomoves state-machine");
                            break;
                    } // end switch DodgeObstacle_subState

                    break; // end case DodgeObstacle
                }// end DodgeObstacle

                case AvoidingCliff:
                {
                    // State CliffAhead
                    // Description: Barranco detectado.
                    // Devolver el robot a un estado seguro.

                    /**
                     * "Cliff Ahead" sub-states:
                     *  - Rotate 180º
                     *  - Go Forward
                     */
                    switch (currentCliffAhead_subState) {
                        case TurnAwayFromCliff:
                        {
                            // State CliffAhead_Rotate180
                            if (robot->sensores.sum_angle > 180) {
                                currentCliffAhead_subState = LeaveCliffBehind;
                                currentState = LeaveCliffBehind;
                                break; // Salir inmediatamente del sub-estado
                            }

                            break; // end CliffAhead_Rotate180
                        } // end CliffAhead_Rotate180

                        case LeaveCliffBehind:
                        {
                            // State CliffAhead_GoForward
                            if (robot->sensores.sum_distance > 300) {
                                currentCliffAhead_subState = DISABLED;
                                TrackingByCamera_entDef();
                                break; // Salir inmediatamente del sub-estado
                            }

                            break; // end CliffAhead_GoForward
                        } // end CliffAhead_GoForward

                        default:
                            throw std::logic_error("Invalid switch-case of the Robomoves state-machine");
                            break;

                    } // end switch (CliffAhead_subState)

                    break; // end case CliffAhead
                }

                default:
                    throw std::logic_error("Invalid switch-case of the Robomoves state-machine");
                    break;

            } //end switch (NormalOperate_subState)

            break; // end case "NormalOperate"
        } // end NormalOperate

        default:
            throw std::logic_error("Invalid switch-case of the Robomoves state-machine");
            break;

    } // end TOP-level switch (rootState_active)

} // end void UC::statechart_process()

/**
 * TODO: documentar
 */
void RobotStateMachine::endBehavior() {

}